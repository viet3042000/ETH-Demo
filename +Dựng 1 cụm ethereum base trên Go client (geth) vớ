+Dựng 1 cụm ethereum base trên Go client (geth) với 3 node trên máy cá nhân
+Build 2 erc20 token 
+Build 1 sàn dex dựa trên thuật toán AMM


https://medium.com/@prashantramnyc/how-to-set-up-a-multi-node-private-ethereum-blockchain-from-scratch-in-20-mins-or-less-e0d7e091e062

//Initialize with the  genesis.json

	geth --datadir node1 account new

	Public address of the key:   0xe338D9C16fDF1f77a10B84B865fa241bdB339964
	Path of the secret key file: node1/keystore/UTC--2025-02-16T14-37-01.002765000Z--e338d9c16fdf1f77a10b84b865fa241bdb339964

	geth --datadir node1 init genesis.json

	geth --datadir node2 init genesis.json

	geth --datadir node2 account new
	
	Public address of the key:   0xA9F7968B2095ada37c380DD02C255bD3ECB33Ecf
Path of the secret key file: node2/keystore/UTC--2025-02-16T14-37-21.162955000Z--a9f7968b2095ada37c380dd02c255bd3ecb33ecf

	geth --datadir node3 init genesis.json

	geth --datadir node3 account new

	Public address of the key:   0xF8a5DE91dd4aBF703B1FaeA8a23db31BE9fBe415
Path of the secret key file: node3/keystore/UTC--2025-02-16T14-37-39.926852000Z--f8a5de91dd4abf703b1faea8a23db31be9fbe415
		
// Start the Nodes Again

	//Node1

		//Start the first node as the bootnode and generate an enode ID:
			bootnode -genkey boot.key  
			bootnode -nodekey boot.key  
			-> Copy the enode:// address displayed.


		geth --datadir node1 --networkid 1337 --nodiscover --mine --unlock "0xYOUR_NODE1_ADDRESS" --password password.txt --http --http.api eth,net,web3,admin --port 30303 --http.port 8545 --bootnodes "enode://BOOTNODE_ID@IP:PORT"

		geth --http --http.api eth,net,web3,miner,admin --http.addr 0.0.0.0 --http.port 8545 --port 30303 --authrpc.port 8551  --authrpc.jwtsecret node1/geth/jwtsecret --networkid 1 --nodiscover --datadir node1 console

		geth --http --http.api eth,net,web3,miner,admin --http.addr 0.0.0.0 --http.port 8545 --port 30303 --authrpc.addr localhost --authrpc.port 8551 --authrpc.jwtsecret node1/geth/jwtsecret --networkid 1234 --syncmode full --nodiscover --datadir node1 console


		geth --authrpc.addr localhost --authrpc.port 8551 --authrpc.vhosts localhost --authrpc.jwtsecret /tmp/jwtsecret

		defaul --authrpc.port = 8551, --port = 30303

		get nodeinfo: admin.nodeInfo

			"enode://0af91c8b1de61b2b743b9033bcc1ad7a5cbf5a522ab45985bab99c1df70741c76c367ad0f258af74d53a754226a174a6b3c478edf283a0dc68086751fae76603@127.0.0.1:30303?discport=0"

	//Node2

		geth --datadir node2 --networkid 1337 --port 30304 --http --http.port 8546 --bootnodes "enode://BOOTNODE_ID@IP:PORT"



		start: geth --datadir node2 --nodiscover --networkid 1234 --port 30304 --authrpc.port 8552 console

		geth --http --http.api eth,net,web3,miner,admin --http.addr 0.0.0.0 --http.port 8546 --port 30304 --authrpc.port 8552 --authrpc.jwtsecret node2/geth/jwtsecret --networkid 1 --nodiscover --datadir node2 console


	//Node 3
		geth --datadir node3 --networkid 1337 --port 30305 --http --http.port 8547 --bootnodes "enode://BOOTNODE_ID@IP:PORT"


		start: geth --datadir node3 --nodiscover --networkid 1234 --port 30305 --authrpc.port 8553 console

		geth --http --http.api eth,net,web3,miner,admin --http.addr 0.0.0.0 --http.port 8547 --port 30305 --authrpc.port 8553 --authrpc.jwtsecret node3/geth/jwtsecret --networkid 1 --nodiscover --datadir node3 console

	join network: admin.addPeer("enode://8f93a10c5072808a849d46b8fbc7e0197a12a73cfa2314dcb7d0eaae834e3fbf48506c6e3f9fecdd7c0c4311645871832b158673adc9ebcd2b74a3cb491dfa56@127.0.0.1:30303?discport=0")

//Stop Geth (if running)
	pkill geth

//Remove the Old Chain Data
	rm -rf node1/geth
	rm -rf node2/geth
	rm -rf node3/geth

geth attach --exec "eth.getBalance('0xe338D9C16fDF1f77a10B84B865fa241bdB339964')"


npx hardhat run ./scripts/deploy.js --network node1
npx hardhat run ./scripts/deploy.js --network node2
npx hardhat run ./scripts/deploy.js --network node3


geth attach http://127.0.0.1:8545 


lighthouse beacon_node \
--network mainnet \
--execution-endpoint http://127.0.0.1:8551 \
--execution-jwt node1/geth/jwtsecret \
--checkpoint-sync-url-timeout 60000  \
--checkpoint-sync-url https://mainnet.checkpoint.sigp.io \
--disable-deposit-contract-sync \
--allow-insecure-genesis-sync



      --execution-endpoint <EXECUTION-ENDPOINT>
          Server endpoint for an execution layer JWT-authenticated HTTP JSON-RPC
          connection. Uses the same endpoint to populate the deposit cache.
      --execution-jwt <EXECUTION-JWT>
          File path which contains the hex-encoded JWT secret for the execution
          endpoint provided in the --execution-endpoint flag.
      --execution-jwt-id <EXECUTION-JWT-ID>
          Used by the beacon node to communicate a unique identifier to
          execution nodes during JWT authentication. It corresponds to the 'id'
          field in the JWT claims object.Set to empty by default
      --execution-jwt-secret-key <EXECUTION-JWT-SECRET-KEY>
          Hex-encoded JWT secret for the execution endpoint provided in the
          --execution-endpoint flag.

